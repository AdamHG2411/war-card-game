{"version":3,"sources":["../js/main.js"],"names":["player1StackSize","document","querySelector","innerHTML","player1InPlay","player1Rank","player1Suit","player2StackSize","player2InPlay","player2Rank","player2Suit","startGameButton","addEventListener","startGame","warButton","style","display","makeWar","suitImg1","createElement","append","suitImg2","Card","suit","rank","score","Deck","quant","deck","suits","ranks","scores","i","j","push","currentIndex","tempValue","randomIndex","length","Math","floor","random","console","log","drawnCard","shift","Player","name","rankText","suitText","stack","inPlay","obj","draw","evt","preventDefault","setAttribute","player1","player2","play","alert","textContent","onlyDeck","shuffle","takeHalf"],"mappings":"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","file":"main.87984690.js","sourceRoot":"../src/pug","sourcesContent":["//Variables\nlet player1StackSize = document.querySelector('#player1StackSize')\nplayer1StackSize.innerHTML = \"0\"\nlet player1InPlay = document.querySelector ('#player1InPlay')\nlet player1Rank = document.querySelector('#player1Rank')\nlet player1Suit = document.querySelector('#player1Suit')\nlet player2StackSize = document.querySelector('#player2StackSize')\nplayer2StackSize.innerHTML = \"0\"\nlet player2InPlay = document.querySelector('#player2InPlay')\nlet player2Rank = document.querySelector('#player2Rank')\nlet player2Suit = document.querySelector('#player2Suit')\nlet startGameButton = document.querySelector('#startGameButton')\nstartGameButton.addEventListener('click', startGame)\nlet warButton = document.querySelector('#warButton')\nwarButton.style.display = \"none\"\nwarButton.addEventListener('click', makeWar)\nlet suitImg1 = document.createElement('img')\nplayer1InPlay.append(suitImg1)\nsuitImg1.style.display = \"none\"\nlet suitImg2 = document.createElement('img')\nplayer2InPlay.append(suitImg2)\nsuitImg2.style.display = \"none\"\nplayer1Rank.innerHTML = \" \"\nplayer1Suit.innerHTML = \" \"\nplayer2Rank.innerHTML = \" \"\nplayer2Suit.innerHTML = \" \"\n\n//Classes\nclass Card {\n  constructor(suit,rank,score) {\n    this.suit = suit\n    this.rank = rank\n    this.score = score\n  }\n}\nclass Deck {\n  constructor() {\n    this.quant = 52\n    this.deck = []\n    this.suits = [\"hearts\", \"diamonds\", \"clubs\", \"spades\"]\n    this.ranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n    this.scores = [2,3,4,5,6,7,8,9,10,11,12,13,14]\n  }\n  shuffle() {\n    this.deck = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 13; j++) {\n        this.deck.push(new Card(this.suits[i],this.ranks[j], this.scores[j]))\n      }\n    }\n    let currentIndex = this.deck.length, tempValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      tempValue = this.deck[currentIndex];\n      this.deck[currentIndex] = this.deck[randomIndex];\n      this.deck[randomIndex] = tempValue;\n    }\n    return this.deck\n  }\n  draw() {\n    console.log(`${this.deck[0].rank} of ${this.deck[0].suit}`)\n    let drawnCard = this.deck[0]\n    this.deck.shift()\n    // if (this.deck.length === 0) {\n    //   this.shuffle()\n    // }\n    return drawnCard\n  }\n}\n\nclass Player {\n  constructor(name, rankText, suitText) {\n    this.name = name\n    this.stack = [];\n    this.inPlay = [];\n    this.rankText = rankText\n    this.suitText = suitText\n  }\n  takeHalf(obj) {\n    for (i = 0; i < 26; i++) {\n      this.stack.push(obj.draw())\n    }\n    console.log(this.stack)\n  }\n  play(evt) {\n    evt.preventDefault()\n    this.inPlay.push(this.stack.shift())\n    console.log(this.inPlay[0])\n    this.rankText.innerHTML = this.inPlay[0].rank\n    this.suitText.innerHTML = this.inPlay[0].suit\n    //This is the last of several attempts to get the suit images to display on the card - still not working at this point - think it has something to do with parcel\n    if (this.name === 'player1') {\n      suitImg1.setAttribute('src',`../img/${this.inPlay[0].suit}.png`)\n    } else {\n      suitImg2.setAttribute('src',`../img/${this.inPlay[0].suit}.png`)\n    }\n    player1StackSize.innerHTML = `${player1.stack.length}`\n    player2StackSize.innerHTML = `${player2.stack.length}`\n    console.log(`${this.name} played the ${this.inPlay[0].rank} of ${this.inPlay[0].suit}`)\n  }\n}\n\n//Functions\nfunction makeWar(evt) {\n  player1.play(evt)\n  player2.play(evt)\n  if (player1.inPlay[0].score > player2.inPlay[0].score) {\n    player1.stack.push(player1.inPlay.shift())\n    player1.stack.push(player2.inPlay.shift())\n    console.log('player1 wins this battle')\n  } else if (player1.inPlay[0].score < player2.inPlay[0].score) {\n    player2.stack.push(player1.inPlay.shift())\n    player2.stack.push(player2.inPlay.shift())\n    console.log('player2 wins this battle')\n  } else if (player1.inPlay[0].score === player2.inPlay[0].score) {\n    console.log(\"there was a tie\")\n    player1.stack.push(player1.inPlay.shift())\n    player2.stack.push(player2.inPlay.shift())\n    // tiebreaker(evt)\n  } else {\n    console.log('something is broken')\n  }\n  player1StackSize.innerHTML = `${player1.stack.length}`\n  player2StackSize.innerHTML = `${player2.stack.length}`\n  if (player1.stack.length === 0) {\n    console.log(\"Player 2 wins!\")\n    alert(\"Player 2 wins!\")\n  } else if (player2.stack.length === 0) {\n    console.log(\"Player 1 wins!\")\n    alert(\"Player 1 wins!\")\n  }\n}\n\n//Started to attempt a tiebreaker but didn't quite get it working\n// function tiebreaker(evt) {\n//   for (i = 0; i < 3; i ++) {\n//     player1.play(evt)\n//     player2.play(evt)\n//   }\n//   while (player1.inPlay.length > 0) {\n//     if (player1.inPlay[0].score > player2.inPlay[0].score) {\n//       for (i = 0; i < player1.inPlay.length; i++) {\n//         player1.stack.push(player1.inPlay.shift())\n//         player1.stack.push(player2.inPlay.shift())\n//       }\n//       console.log('player1 won the tiebreaker')\n//     } else if (player1.inPlay[0].score < player2.inPlay[0].score) {\n//       for (i = 0; i < player1.inPlay.length; i++) {\n//         player2.stack.push(player1.inPlay.shift())\n//         player2.stack.push(player2.inPlay.shift())\n//       }\n//       console.log('player2 won the tiebreaker')\n//     } else if (player1.inPlay[0].score === player2.inPlay[0].score) {\n//       console.log(\"there was another tie - let's start over\")\n//       tiebreaker()\n//     } else {\n//       console.log('something is broken')\n//     }\n//   }\n// }\n\nfunction startGame(evt) {\n  evt.preventDefault();\n  player1Rank.innerHTML = \" \"\n  player1Suit.innerHTML = \" \"\n  player2Rank.innerHTML = \" \"\n  player2Suit.innerHTML = \" \"\n  startGameButton.textContent = 'Reset'\n  player1.stack = [];\n  player2.stack = [];\n  onlyDeck.shuffle()\n  player1.takeHalf(onlyDeck)\n  player2.takeHalf(onlyDeck)\n  player1StackSize.innerHTML = `${player1.stack.length}`\n  player2StackSize.innerHTML = `${player2.stack.length}`\n  warButton.style.display = \"block\"\n}\n\n//Instances of classes\nlet onlyDeck = new Deck()\nlet player1 = new Player(\"player1\", player1Rank, player1Suit)\nconsole.log(player1)\nlet player2 = new Player(\"player2\", player2Rank, player2Suit)\nconsole.log(player2)\n\n//Commands to initialize game - now in a button\n// startGame();"]}